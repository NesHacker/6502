const { bytesToHex } = require("./util")

/**
 * Linear intermediate representation for an array of arbitrary bytes. Usually
 * this form is generated by the use of the `.BYTE` command.
 */
class ByteArray {
  /**
   * Creates a new ByteArray .
   * @param {object} opts Options for the byte array.
   * @param {Array<number>} bytes Bytes for the array.
   * @param {ParseLine} line The source line that generated the array.
   */
  constructor ({ bytes, line }) {
    this._line = line
    this.address = -1
    this._bytes = new Uint8Array(bytes)
  }

  /**
   * @return {number} The address for the start of the byte array.
   */
  get address () {
    return this._address
  }

  /**
   * Sets the starting address for the byte array.
   * @param {number} addr The address to set.
   */
  set address (addr) {
    this._address = addr
  }

  /**
   * @return {Uint8Array} The bytes
   */
  get bytes () {
    return this._bytes
  }

  /**
   * @return {string} The hexidecimal string representation of array bytes.
   */
  get hex () {
    return bytesToHex(this.bytes)
  }

  /**
   * @return {number} The number of bytes in the array.
   */
  get length () {
    return this.bytes.length
  }
}

module.exports = { ByteArray }
